/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package Vista;

import Model.conectar;
import Model.mail;
import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JOptionPane;
import org.apache.commons.mail.DefaultAuthenticator;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailAttachment;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.MultiPartEmail;
import org.apache.commons.mail.SimpleEmail;

/**
 * La clase `ControlCambiosManager` proporciona métodos para gestionar el control de cambios y enviar correos electrónicos.
 * Esta clase incluye métodos para mostrar el stock de productos, generar una tabla de control de cambios y enviar un correo electrónico con la tabla adjunta.
 * 
 * Esta clase depende de la clase `conectar` para establecer la conexión a la base de datos y de la clase `mail` para enviar correos electrónicos con archivos adjuntos.
 * 
 * @author mmarc
 */
public class controlCambios extends javax.swing.JDialog {

    /**
     * Creates new form controlCambios
     * @param parent
     * @param modal
     */
    public controlCambios(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        Stock();
        File file = new File("tabla.csv");
        if (file.exists()) {
            file.delete();
        }

        tabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        controlTable = new javax.swing.JTable();
        mailText = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        btEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        controlTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Usuario", "Tipo de cambio", "Tabla", "Indentificador", "Fecha"
            }
        ));
        jScrollPane1.setViewportView(controlTable);

        mailText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mailTextActionPerformed(evt);
            }
        });

        jLabel1.setText("Escribe el mail al que enviar el control de  cambios de la BBDD");

        btEnviar.setBackground(new java.awt.Color(102, 102, 255));
        btEnviar.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btEnviar.setForeground(new java.awt.Color(255, 255, 255));
        btEnviar.setText("Enviar");
        btEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(mailText, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btEnviar)
                .addGap(46, 46, 46))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mailText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btEnviar))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mailTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mailTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mailTextActionPerformed

    private void btEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnviarActionPerformed
        // TODO add your handling code here:
        mailing();
    }//GEN-LAST:event_btEnviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(controlCambios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(controlCambios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(controlCambios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(controlCambios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                controlCambios dialog = new controlCambios(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btEnviar;
    private javax.swing.JTable controlTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField mailText;
    // End of variables declaration//GEN-END:variables

      /** El asunto del correo electrónico predeterminado. */
    String asunto = "Mail de control de cambios";
    
    /** El mensaje del correo electrónico. */
    String mensaje;
    
    /** El destinatario del correo electrónico. */
    String destinatario;

    /**
     * Muestra el stock de productos y los cambios realizados en la base de datos.
     */
    public void Stock() {
        // Conectar a la base de datos
        conectar.conecta();

        // Crear un modelo de tabla predeterminado
        DefaultTableModel dft = new DefaultTableModel();

        // Obtener resultados de la base de datos y agregarlos a la tabla
        ResultSet rs = conectar.verProductos("Select UsuarioLogin,tipo_de_cambio,tabla,IdProducto,fecha FROM auditor order by fecha desc");
        dft.setColumnIdentifiers(new Object[]{"Usuario", "Tipo de cambio", "Tabla", "Identificador", "Fecha"});
        try {
            while (rs.next()) {
                dft.addRow(new Object[]{rs.getString("auditor.UsuarioLogin"), rs.getString("auditor.tipo_de_cambio"),
                    rs.getString("auditor.tabla"), rs.getString("auditor.IdProducto"), rs.getTimestamp("fecha")});
            }
            controlTable.setModel(dft);
        } catch (SQLException ex) {
            Logger.getLogger(conectar.class.getName()).log(Level.SEVERE, "Algo no va bien", ex);

        }

        // Cerrar la conexión a la base de datos
        conectar.cerrarConexion();
    }

    /**
     * Genera una tabla de datos y la guarda en un archivo CSV.
     */
    public void tabla() {
    // Paso 1: Escribe los datos de la tabla en un archivo CSV
    try (FileWriter writer = new FileWriter("tabla.csv")) {
        for (int i = 0; i < controlTable.getRowCount(); i++) {
            for (int j = 0; j < controlTable.getColumnCount(); j++) {
                Object value = controlTable.getValueAt(i, j);
                if (value != null) {
                    writer.write(value.toString() + ",");
                } else {
                    writer.write("null,");
                }
            }
            writer.write("\n");
        }

    } catch (IOException e) {
        e.printStackTrace();
    }
}

    /**
     * Envía un correo electrónico con la tabla de control de cambios adjunta.
     */
    public void mailing() {
        // Obtener el destinatario del campo de texto
        destinatario = mailText.getText();
        
        // Establecer el mensaje del correo electrónico
        mensaje = "Esto que llega es el control de cambios de la BBDD Merchanidisng";
        
        // Crear una instancia de la clase mail para enviar el correo electrónico con la tabla adjunta
        mail email = new mail(asunto, mensaje, destinatario, "tabla.csv");

        // Enviar el correo electrónico y mostrar un mensaje de confirmación o error
        if (email.MailAdjunto()) {
            JOptionPane.showMessageDialog(this, "Mensaje enviado correctamente");
        } else {
            JOptionPane.showMessageDialog(this, "No fue posible enviar el mensaje");
        }
        
        // Limpiar el campo de texto y habilitarlo nuevamente
        mailText.setText("");
        mailText.setEnabled(true);
    }
}



